buildscript {
    repositories { jcenter() }

    dependencies {
        classpath 'com.github.jruby-gradle:jruby-gradle-plugin:1.3.3'
    }
}

apply plugin: "com.github.jruby-gradle.base"

import com.github.jrubygradle.JRubyExec

dependencies {
    jrubyExec "rubygems:asciidoctor:1.5.4"
}

wrapper {
    gradleVersion '3.5'
}

// Documentation tasks
task generateMainReadme(type: JRubyExec) {
    group = "Documentation"
    description = "Creates the README.adoc for the project"
    script "${projectDir}/docs/coalesce-readme.rb"
    scriptArgs "-i ${projectDir}/docs/README.adoc", "-o ${projectDir}/README.adoc"
}

task generateWorkshopsReadme(type: JRubyExec) {
    group = "Documentation"
    description = "Creates the workshops.html"
    script "${projectDir}/docs/generate-index.rb"
    scriptArgs "${projectDir}/docs/workshops.adoc"
}

task generateIndex(type: JRubyExec, dependsOn: ["generateWorkshopsReadme"]) {
    group = "Documentation"
    description = "Creates the index.html"
    script "${projectDir}/docs/generate-index.rb"
    scriptArgs "${projectDir}/docs/index.adoc"
}

task generateDocumentation(dependsOn: ["generateIndex", "generateMainReadme"]) {
    group = "Documentation"
    description = "Creates full documentation for the project"
}

// Workshop tasks
task removeContracts(type: Delete) {
    group = "Workshops"
    description = "Removes all contracts"
    List<String> producers =  ['producer', 'producer_with_scenario',
                               'producer_with_restdocs', 'producer_with_stubs_per_consumer']
    List<String> folders = producers.collect {
        "${it}/src/test/resources/contracts/"
    }
    delete folders
    delete 'beer_contracts/src/main/resources/contracts/'
}

task removeTextFromFiles() {
    group = "Workshops"
    description = "Removes written implementation"
    doLast {
        FileTree tree = fileTree(dir: '.', include: ['**/*.java',
                                                     '**/*.xml',
                                                     '**/*.gradle',
                                                     '**/*.properties'])
        tree.each { File file ->
            String text = file.text
            if (!text.contains("remove::start")) {
                return
            }
            StringBuilder newString = new StringBuilder()
            boolean remove = false
            text.eachLine { String line ->
                if (line.contains("remove::end")) {
                    remove = false
                }
                if (!remove) {
                    if (line.contains("remove::start")) {
                        remove = true
                    } else if (!line.contains("remove::end")) {
                        newString.append(line).append("\n")
                    }
                }
            }
            file.text = newString.toString()
        }
    }
}

task prepareForWorkshops(dependsOn: ['removeContracts', 'removeTextFromFiles']) {
    group = "Workshops"
    description = "Executes all tasks to set initial state for workshops"
}
